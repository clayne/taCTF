* taCTF

taCTF is a side-channel timing attack tool that uses [[https://valgrind.org/][Valgrind]]. It
reverses binaries that expect a string input and compare it to a
stored "secret" string by counting instructions.

 #+HTML: <img src="./images/elf.png" align="right" width="300">
** Requirements

Python 3, Valgrind. No additional modules.

** Usage

#+BEGIN_SRC sh
  ./tactf.py binaryname -v
#+END_SRC

=-v= makes the output verbose (recommended). There are more complex
ways to use taCTF, listed below.

*** Arguments
| Argument | Long Form       | Function                                    | Default |
|----------+-----------------+---------------------------------------------+---------|
| =-h=     | =--help=        | Help!                                       |         |
| =-v=     | =--verbose=     | Verbose output, with each iteration printed | False   |
| =-r=     | =--reverse=     | Try string backwards.                       | False   |
| =-f=     | =--flag-format= | Known flag format to try.                   | -       |
| =-l=     | =--length=      | Length if known.                            | -       |
| =-c=     | =--charset=     | Which ASCII character 'set' to try.         | 0       |
| =-ml=    | =--max-length=  | Maximum length to check till.               | 35      |

*** Simple Example

 #+HTML: <img src="./images/adv.png" align="right" width="300">
The examples are in the =test= directory.


=gcc test/example.c= to get =a.out=. Then, first try:
#+BEGIN_SRC sh
  ./tactf.py ./a.out -v
#+END_SRC

taCTF first tries to figure out the length by counting instructions.
It then bruteforces the string character by character, left to right.

If we know the flag format in advance, we can save some time:
#+BEGIN_SRC sh
  ./tactf.py ./a.out -v -f sigpwny{
#+END_SRC

If we know the length in advance as well, taCTF will use what we ask
it to:
#+BEGIN_SRC sh
  ./tactf.py ./a.out -v -f sigpwny{ -l 13
#+END_SRC

Sometimes, we can guess the character set to reduce its size. In this
case, we known the restriction is lowercase letters, so:
#+BEGIN_SRC sh
  ./tactf.py ./a.out -v -f sigpwny{ -l 13 -c 1
#+END_SRC

*** Reverse Example: ELF-NoSoftwareBreakpoints

To bruteforce the string right to left:

#+BEGIN_SRC sh
  ./tactf.py test/ELF-NoSoftwareBreakpoints -r -l 25
#+END_SRC

*** Character Set Codes

Punctuation is included by default in all sets.
| Code | Meaning                      |
|------+------------------------------|
|    0 | Lowercase, uppercase, digits |
|    1 | Lowercase                    |
|    2 | Uppercase                    |
|    3 | Lowercase, uppercase         |
|    4 | Lowercase, digits            |


** Errors

If you get =Length guess: -1=, Valgrind is probably not installed, or
isn't on your =$PATH=. Install it with:
#+BEGIN_SRC sh
  sudo apt install valgrind
  sudo pacman -S valgrind
#+END_SRC
Depending on your distribution.


** Why not [[https://github.com/ChrisTheCoolHut/PinCTF][PinCTF]]?

Installing Intel PIN is a pain, and running it even more so. I could
never get PIN working reliably on anything but an Ubuntu VM, so this
is a PinCTF equivalent written for Valgrind.

** When Does it Work?
Binaries that use an insecure string compare [[https://en.wikipedia.org/wiki/Timing_attack#Algorithm][of the form]]:

#+BEGIN_SRC c
  bool insecureStringCompare(const void *a, const void *b, size_t length) {
    const char *ca = a, *cb = b;
    for (size_t i = 0; i < length; i++)
      if (ca[i] != cb[i])
        return false;
    return true;
  }
#+END_SRC


** TODO
- Add some stats stuff to compute mean, see deviation, etc. to decide
  on best value to use in case instruction counts are close
- Feature to (=--all=) compare valgrind and PIN counting: deal with
  case of disagreement between PIN and valgrind.
